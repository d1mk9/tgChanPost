# Этап сборки
FROM golang:1.23

# Установим рабочую директорию
WORKDIR /app

# Копируем go.mod и go.sum для кэширования зависимостей
COPY go.mod go.sum ./
RUN go mod download

# Копируем весь код в контейнер, игнорируя файлы, указанные в .dockerignore
COPY . .  

# Проверяем содержимое директории
RUN ls -R /app

# Собираем приложение
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -v -o bot ./cmd/bot

# Указываем команду для запуска приложения
CMD ["./bot"]

# Объяснение Dockerfile
# Этап сборки:
# 
# Используется образ golang:1.20 для сборки приложения.
# Устанавливается рабочая директория /app.
# Копируются файлы go.mod и go.sum, чтобы сначала загрузить зависимости. Это позволяет кэшировать слои Docker и ускорить сборку при изменении кода.
# Копируется весь код приложения в контейнер.
# Выполняется команда сборки, которая создает исполняемый файл bot в формате Linux.
# Этап выполнения:
# 
# Используется легковесный образ alpine:latest для выполнения приложения.
# Устанавливается рабочая директория /root/.
# Копируется скомпилированный исполняемый файл bot из предыдущего этапа.
# Указывается команда для запуска приложения.